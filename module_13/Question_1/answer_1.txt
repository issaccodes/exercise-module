Q. Describe the main differences between the CSS Flexbox layout model and CSS Grid layout model. 
When would you choose to use one over the other?

-> Main Differences Between Flexbox and Grid



1. Layout Model:

Flexbox: One-dimensional layout model that works in a single axis (row or column). It is ideal for aligning items either horizontally or vertically.
Grid: Two-dimensional layout model that allows you to define layouts both in rows and columns, making it suitable for more complex, grid-based designs.



2. Alignment and Positioning:

Flexbox: Provides fine control over the alignment, spacing, and distribution of items within a single axis. Itâ€™s excellent for centering elements or handling dynamic content.
Grid: Provides more robust positioning capabilities using grid-template-areas, rows, and columns, allowing for precise and consistent layouts.


3. Flexibility vs. Structure:

Flexbox: Focuses on content-based flexibility. Items adapt to the available space dynamically.
Grid: Focuses on explicit structure. You define rows, columns, and areas, which creates a fixed and predictable layout.


4. Usage of Tracks:

Flexbox: Does not have the concept of rows or columns as separate entities; items flow naturally based on content and the direction specified.
Grid: Defines explicit tracks (rows and columns) with sizes and spacing, making it easier to design large-scale layouts.


WHEN TO USE FLEXBOX: 

1. One-Dimensional Layouts: When you need to arrange items in a single row or column, such as navigation bars, buttons, or aligning a set of cards.
2. Dynamic Content: When the size of items is based on content, and you need responsiveness.

Examples:

-Aligning buttons horizontally with equal spacing. 
-Centering content both vertically and horizontally.


WHEN TO USE GRID:

1. Two-Dimensional Layouts: When you need to design a layout that spans multiple rows and columns, such as a webpage layout or a photo gallery.
2. Explicit Positioning: When you need specific items to appear in defined areas of a layout.


Examples: 

-Creating a dashboard layout with widgets.
-Designing a magazine-style layout with overlapping sections.
